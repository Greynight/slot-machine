{"version":3,"sources":["App.js","index.js"],"names":["images","spinInterval","stopTimeOut","Spinner","React","forwardRef","props","ref","defaultImage","style","backgroundImage","backgroundSize","className","App","handleStart","intervalId","setState","text","showStart","showStop","spin","handleStop","clearInterval","checkResult","spinOnce","spinners","forEach","spinner","setImage","randomSymbol","setInterval","setTimeout","getResults","map","item","getImage","results","reward","resultText","imageId","current","state","undefined","createRef","this","index","key","onClick","Math","floor","random","Component","ReactDOM","render","document","getElementById"],"mappings":"uPAGMA,G,MAAS,CAAC,aAAc,iBAAkB,aAAc,eACxDC,EAAe,GAEfC,EAAc,IAEdC,EAAUC,IAAMC,WAAW,SAACC,EAAOC,GACvC,IAAMC,EAAeR,EAAO,GACtBS,EAAQ,CACZC,gBAAgB,WAAD,OAAaF,EAAb,KACfG,eAAgB,WAGlB,OAAO,yBAAKJ,IAAKA,EAAKK,UAAW,UAAWH,MAAOA,MAoItCI,E,YAhIb,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KA0BRQ,YAAc,WACP,EAAKC,aACR,EAAKC,SAAS,CACZC,KAAM,mCACNC,WAAW,EACXC,UAAU,IAGZ,EAAKC,SAnCU,EAuCnBC,WAAa,WACP,EAAKN,aACP,EAAKC,SAAS,CACZE,WAAW,EACXC,UAAU,IAGZG,cAAc,EAAKP,YACnB,EAAKA,WAAa,KAClB,EAAKQ,gBAhDU,EAqDnBC,SAAW,WACT,EAAKC,SAASC,QAAQ,SAAAC,GACpB,EAAKC,SAASD,EAAS,EAAKE,iBAvDb,EA2DnBT,KAAO,WACL,EAAKL,WAAae,YAAY,EAAKN,SAAUvB,GAE7C8B,WAAW,WACL,EAAKhB,YACP,EAAKM,cAENnB,IAlEc,EAqEnB8B,WAAa,WACX,OAAO,EAAKP,SAASQ,IAAI,SAAAC,GAAI,OAAI,EAAKC,SAASD,MAtE9B,EAyEnBX,YAAc,WACZ,IAAMa,EAAU,EAAKJ,aACjBK,EAAS,EAETD,EAAQ,KAAOA,EAAQ,KACzBC,EAAS,IAGPD,EAAQ,KAAOA,EAAQ,IAAMA,EAAQ,KAAOA,EAAQ,KACtDC,EAAS,IAGPD,EAAQ,KAAOA,EAAQ,IAAMA,EAAQ,KAAOA,EAAQ,KACtDC,EAAS,KAGX,IAAMC,EAAaD,EAAM,yBAAqBA,EAArB,MAAkC,aAE3D,EAAKrB,SAAS,CACZC,KAAMqB,KA5FS,EAgGnBV,SAAW,SAACD,EAASY,GACnBZ,EAAQa,QAAQ/B,MAAM,oBAAtB,kBAAuDT,EAAOuC,GAA9D,MAjGiB,EAoGnBJ,SAAW,SAACR,GACV,OAAOA,EAAQa,QAAQ/B,MAAM,qBAlG7B,EAAKgC,MAAQ,CACXxB,KAAM,0CACNC,WAAW,EACXC,UAAU,GAGZ,EAAKJ,gBAAa2B,EAClB,EAAKjB,SAAW,CAACrB,IAAMuC,YAAavC,IAAMuC,YAAavC,IAAMuC,aAV5C,E,iFAiBE,IAAD,OAClBC,KAAKpB,WAELO,WAAW,gBACeW,IAApB,EAAK3B,YACP,EAAKD,eApCQ,O,+BAsHT,IAAD,EAC+B8B,KAAKH,MAAnCxB,EADD,EACCA,KAAMC,EADP,EACOA,UAAWC,EADlB,EACkBA,SAEzB,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,8BAAQK,GACR,yBAAKL,UAAW,qBAEZgC,KAAKnB,SAASQ,IAAI,SAACC,EAAMW,GAAP,OAChB,kBAAC1C,EAAD,CAAS2C,IAAKD,EAAOtC,IAAK2B,OAIhC,yBAAKtB,UAAW,WACbM,EAAY,4BAAQ6B,QAASH,KAAK9B,aAAtB,SAAoD,KAChEK,EAAW,4BAAQ4B,QAASH,KAAKvB,YAAtB,QAAkD,U,mCA1GtE,OAAO2B,KAAKC,MAAsB,EAAhBD,KAAKE,c,GAfT9C,IAAM+C,WCbxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a48e2e1a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst images = ['banana.png', 'strawberry.png', 'orange.png', 'monkey.png'];\nconst spinInterval = 50;\nconst startTimeOut = 5000;\nconst stopTimeOut = 10000;\n\nconst Spinner = React.forwardRef((props, ref) => {\n  const defaultImage = images[0];\n  const style = {\n    backgroundImage: `url(img/${defaultImage})`,\n    backgroundSize: 'contain'\n  };\n\n  return <div ref={ref} className={'spinner'} style={style}></div>\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: 'Press button \"Start\" or wait 5 seconds.',\n      showStart: true,\n      showStop: false\n    };\n\n    this.intervalId = undefined;\n    this.spinners = [React.createRef(), React.createRef(), React.createRef()];\n  }\n\n  get randomSymbol() {\n    return Math.floor(Math.random() * 4);\n  }\n\n  componentDidMount() {\n    this.spinOnce();\n\n    setTimeout(() => {\n      if (this.intervalId === undefined) {\n        this.handleStart();\n      }\n    }, startTimeOut)\n  }\n\n  handleStart = () => {\n    if (!this.intervalId) {\n      this.setState({\n        text: 'Press \"Stop\" or wait 10 seconds.',\n        showStart: false,\n        showStop: true\n      });\n\n      this.spin();\n    }\n  };\n\n  handleStop = () => {\n    if (this.intervalId) {\n      this.setState({\n        showStart: true,\n        showStop: false\n      });\n\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n      this.checkResult();\n    }\n  };\n\n  // TODO test - maybe just check that the result has changed\n  spinOnce = () => {\n    this.spinners.forEach(spinner => {\n      this.setImage(spinner, this.randomSymbol);\n    })\n  };\n\n  spin = () => {\n    this.intervalId = setInterval(this.spinOnce, spinInterval);\n\n    setTimeout(() => {\n      if (this.intervalId) {\n        this.handleStop();\n      }\n    }, stopTimeOut);\n  };\n\n  getResults = () => {\n    return this.spinners.map(item => this.getImage(item));\n  };\n\n  checkResult = () => {\n    const results = this.getResults();\n    let reward = 0;\n\n    if (results[0] === results[2]) {\n      reward = 10;\n    }\n\n    if (results[0] === results[1] || results[1] === results[2]) {\n      reward = 20;\n    }\n\n    if (results[0] === results[1] && results[1] === results[2]) {\n      reward = 100;\n    }\n\n    const resultText = reward ? `Your reward is ${reward}$!` : 'Try again!';\n\n    this.setState({\n      text: resultText\n    })\n  };\n\n  setImage = (spinner, imageId) => {\n    spinner.current.style['background-image'] = `url(img/${images[imageId]})`;\n  };\n\n  getImage = (spinner) => {\n    return spinner.current.style['background-image'];\n  };\n\n  render() {\n    const { text, showStart, showStop } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <span>{ text }</span>\n          <div className={'spinner-container'}>\n            {\n              this.spinners.map((item, index) => (\n                <Spinner key={index} ref={item}/>\n              ))\n            }\n          </div>\n          <div className={'buttons'}>\n            {showStart ? <button onClick={this.handleStart}>Start</button> : null}\n            {showStop ? <button onClick={this.handleStop}>Stop</button> : null}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}